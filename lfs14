import socket
import struct
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

# Initial setup
fig, ax = plt.subplots()
line, = ax.plot([], [], 'ro-', label='Vehicle Path')  # Initialize the plot line
ax.set_xlim(-100, 100)  # Initial axis limits
ax.set_ylim(-100, 100)
ax.set_title('Real-time Vehicle Trajectory')
ax.set_xlabel('X Position (meters)')
ax.set_ylabel('Y Position (meters)')
ax.legend()

# Lists to store the positions
x_positions, y_positions = [], []

# Setup UDP socket
UDP_IP = "0.0.0.0"
UDP_PORT = 50000
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(0.1)  # Set a timeout for socket operations

def decode_outsim_packet(data):
    """Decode the received UDP packet into a dictionary of relevant data."""
    try:
        # Adjust the unpack format to match the data structure you are receiving
        outsim_fmt = '<4s I I 3f f f f 3f 3f 3f f f f f f 4f f f f f f f f f 4x 4f 4x 4f 4x 4f 4x 4f 4x'
        unpacked_data = struct.unpack(outsim_fmt, data)
        return {
            "Time (ms)": unpacked_data[2],
            "Position (X, Y, Z)": unpacked_data[15:18],  # Extract X, Y, Z positions
        }
    except struct.error:
        print("Packet reception error or incomplete packet.")
        return None

def update(frame):
    """Update function for the Matplotlib animation."""
    try:
        packet, _ = sock.recvfrom(4096)  # Large enough buffer size
        decoded_packet = decode_outsim_packet(packet)
        if decoded_packet:
            pos_x, pos_y, _ = decoded_packet['Position (X, Y, Z)']
            x_positions.append(pos_x)
            y_positions.append(pos_y)
            line.set_data(x_positions, y_positions)

            # Dynamically adjust the axes based on the extent of the data
            ax.set_xlim(min(x_positions) - 10, max(x_positions) + 10)
            ax.set_ylim(min(y_positions) - 10, max(y_positions) + 10)
    except socket.timeout:
        print("Timeout - No packet received.")

    return line,

# Create an animation
ani = animation.FuncAnimation(fig, update, init_func=lambda: line, interval=50)
plt.show()
