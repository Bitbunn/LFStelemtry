import socket
import struct
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# Setup initial pour matplotlib
fig, ax = plt.subplots()
line, = ax.plot([], [], 'ro-', label='Vehicle Path')
ax.set_title('Real-time Vehicle Trajectory')
ax.set_xlabel('X Position (meters)')
ax.set_ylabel('Y Position (meters)')
ax.legend()

# Configuration du socket UDP
UDP_IP = "0.0.0.0"
UDP_PORT = 50000
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(0.1)

def decode_outsim_packet(data):
    packet_size = len(data)
    # Configurez ici pour les diff√©rentes tailles de paquet que vous pourriez recevoir
    if packet_size == 280:
        outsim_fmt = '<4s I I 3f f f f 3f 3f 3f f f f f f 4f f f f f f f f f 4x 4x 4x 4x 4x'
    else:
        print(f"Unsupported packet size: {packet_size}")
        return None

    try:
        unpacked_data = struct.unpack(outsim_fmt, data)
        return {
            "Position (X, Y, Z)": unpacked_data[15:18],
        }
    except struct.error as e:
        print(f"Failed to unpack data: {e}")
        return None

def update(frame):
    try:
        packet, _ = sock.recvfrom(4096)  # Assurez-vous que la taille du buffer est suffisante
        decoded_packet = decode_outsim_packet(packet)
        if decoded_packet:
            pos_x, pos_y, _ = decoded_packet['Position (X, Y, Z)']
            ax.plot(pos_x, pos_y, 'ro')  # Update plot with each new point

            # Dynamically adjust the axes
            ax.relim()
            ax.autoscale_view()
    except socket.timeout:
        print("Timeout - No packet received.")
    return line,

ani = animation.FuncAnimation(fig, update, init_func=lambda: line, interval=50)
plt.show()
