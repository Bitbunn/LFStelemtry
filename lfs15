import socket
import struct
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

# Initial setup for the matplotlib figure and axes
fig, ax = plt.subplots()
line, = ax.plot([], [], 'ro-', label='Vehicle Path')  # Initialize the plot line for the trajectory
ax.set_title('Real-time Vehicle Trajectory')
ax.set_xlabel('X Position (meters)')
ax.set_ylabel('Y Position (meters)')
ax.legend()

# Setup UDP socket
UDP_IP = "0.0.0.0"
UDP_PORT = 50000
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(0.1)  # Set a timeout for socket operations

def decode_outsim_packet(data):
    """Decode the received UDP packet into a dictionary of relevant data."""
    outsim_fmt = '<4s I I 3f f f f 3f 3f 3f f f f f f 4f f f f f f f f f 4x 4f 4x 4f 4x 4f 4x 4f 4x'
    unpacked_data = struct.unpack(outsim_fmt, data)
    return {
        "Time (ms)": unpacked_data[2],
        "Position (X, Y, Z)": unpacked_data[15:18],  # Extract X, Y, Z positions
    }

def update(frame):
    """Update function for the Matplotlib animation."""
    try:
        packet, _ = sock.recvfrom(4096)  # Use a buffer size that is large enough for the expected data
        if len(packet) != 272:  # Check if the received packet size matches the expected size
            print(f"Unexpected packet size: {len(packet)}")
            return line,
        
        decoded_packet = decode_outsim_packet(packet)
        pos_x, pos_y, _ = decoded_packet['Position (X, Y, Z)']
        line.set_data(pos_x, pos_y)

        # Dynamically adjust the axes based on the extent of the data
        ax.set_xlim(min(pos_x) - 10, max(pos_x) + 10)
        ax.set_ylim(min(pos_y) - 10, max(pos_y) + 10)

    except struct.error as e:
        print(f"Failed to unpack data: {e}")
    except socket.timeout:
        print("Timeout - No packet received.")

    return line,

# Create an animation
ani = animation.FuncAnimation(fig, update, init_func=lambda: line, interval=50)
plt.show()
