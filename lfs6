import socket
import struct
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

# Configuration initiale de matplotlib
fig, axes = plt.subplots(3, 1, figsize=(10, 15))  # Trois graphiques sur une colonne
lines = [ax.plot([], [], label=label)[0] for ax, label in zip(axes, ['Position (X)', 'Velocity (norm)', 'Acceleration (norm)'])]
for ax, label in zip(axes, ['Position X', 'Velocity Magnitude', 'Acceleration Magnitude']):
    ax.set_title(label)
    ax.set_xlim(0, 100)  # Initial time window
    ax.set_ylim(-10, 10)  # Adjust these limits based on expected range of values
    ax.legend()

# Initialize plots
def init():
    for line in lines:
        line.set_data([], [])
    return lines

# Decode OutSim packet
def decode_outsim_packet(data):
    outsim_fmt = '<I I 3f 3f 3f 3f 3f'
    unpacked_data = struct.unpack(outsim_fmt, data[:68])
    return {
        "Time (ms)": unpacked_data[0],
        "Car ID": unpacked_data[1],
        "Angular Velocity (X, Y, Z)": unpacked_data[2:5],
        "Heading": unpacked_data[5],
        "Pitch": unpacked_data[6],
        "Roll": unpacked_data[7],
        "Acceleration (X, Y, Z)": unpacked_data[8:11],
        "Velocity (X, Y, Z)": unpacked_data[11:14],
        "Position (X, Y, Z)": unpacked_data[14:17]
    }

# Socket setup
UDP_IP = "0.0.0.0"
UDP_PORT = 50000
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(0.1)

# Update function for the animation
def update(frame):
    try:
        packet, addr = sock.recvfrom(1024)
        decoded_packet = decode_outsim_packet(packet)
        if decoded_packet:
            x, y, z = decoded_packet['Position (X, Y, Z)']
            vel = np.linalg.norm(decoded_packet['Velocity (X, Y, Z)'])
            accel = np.linalg.norm(decoded_packet['Acceleration (X, Y, Z)'])
            times = list(lines[0].get_xdata()) + [decoded_packet['Time (ms)']]
            xpos = list(lines[0].get_ydata()) + [x]  # Update position graph with X coordinate
            vels = list(lines[1].get_ydata()) + [vel]  # Update velocity graph
            accels = list(lines[2].get_ydata()) + [accel]  # Update acceleration graph
            for line, data in zip(lines, [xpos, vels, accels]):
                line.set_data(times, data)
                line.axes.set_xlim(times[-1] - 10000, times[-1])  # Adjust x-axis to show last 10 seconds
    except socket.timeout:
        pass
    return lines

# Animation
ani = animation.FuncAnimation(fig, update, init_func=init, blit=True, interval=50)
plt.show()
