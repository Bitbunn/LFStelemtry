import socket
import struct

def decode_outsim_packet(data):
    if len(data) < 272:  # La taille de paquet complète mentionnée
        print("Error: Data received is less than 272 bytes.")
        return None

    # Format étendu pour inclure toutes les données de OutSimPack2
    outsim_fmt = '<4s I I 3f f f f 3f 3f 3f f f f f f 4f f f f f f f f f 4x 4f 4x 4f 4x 4f 4x 4f 4x'
    unpacked_data = struct.unpack(outsim_fmt, data[:272])

    return {
        "Header": unpacked_data[0].decode('utf-8'),
        "Car ID": unpacked_data[1],
        "Time (ms)": unpacked_data[2],
        "Angular Velocity (X, Y, Z)": unpacked_data[3:6],
        "Heading": unpacked_data[6],
        "Pitch": unpacked_data[7],
        "Roll": unpacked_data[8],
        "Acceleration (X, Y, Z)": unpacked_data[9:12],
        "Velocity (X, Y, Z)": unpacked_data[12:15],
        "Position (X, Y, Z)": unpacked_data[15:18],
        "Throttle": unpacked_data[18],
        "Brake": unpacked_data[19],
        "Input Steer": unpacked_data[20],
        "Clutch": unpacked_data[21],
        "Handbrake": unpacked_data[22],
        "Wheel Data": [
            {
                "Susp Deflect": unpacked_data[23],
                "Steer": unpacked_data[24],
                "X Force": unpacked_data[25],
                "Y Force": unpacked_data[26],
                "Vertical Load": unpacked_data[27],
                "Wheel Angular Velocity": unpacked_data[28],
                "Wheel Slip Ratio": unpacked_data[29],
                "Wheel Tan Slip Angle": unpacked_data[30]
            } for _ in range(4)  # Assumption: Data is repeated for 4 wheels
        ]
    }

# Setup UDP socket
UDP_IP = "0.0.0.0"
UDP_PORT = 50000
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))

print(f"Listening on {UDP_IP}:{UDP_PORT}...")

try:
    while True:
        packet, addr = sock.recvfrom(1024)  # Larger buffer to accommodate any size variations
        decoded_packet = decode_outsim_packet(packet)
        if decoded_packet:
            print(f"Received and decoded packet from {addr}: {decoded_packet}")
        else:
            print("Failed to decode packet due to incorrect size.")
except KeyboardInterrupt:
    print("Server stopped manually.")
finally:
    sock.close()
