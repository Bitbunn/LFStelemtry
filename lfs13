import socket
import struct
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

# Configuration initiale de matplotlib
fig, ax = plt.subplots()
line, = ax.plot([], [], 'r-', label='Vehicle Trajectory')
ax.set_title('Vehicle Trajectory in 2D')
ax.set_xlabel('X Position (meters)')
ax.set_ylabel('Y Position (meters)')
ax.legend()

# Listes pour stocker les positions X et Y
x_positions, y_positions = [], []

def init():
    line.set_data([], [])
    ax.set_xlim(-100, 100)  # Définissez des limites initiales larges, ajustées dynamiquement
    ax.set_ylim(-100, 100)
    return line,

def decode_outsim_packet(data):
    # Décodez les données reçues; ajustez selon le format spécifique de vos données
    outsim_fmt = '<4s I I 3f f f f 3f 3f 3f f f f f f 4f f f f f f f f f 4x 4f 4x 4f 4x 4f 4x 4f 4x'
    unpacked_data = struct.unpack(outsim_fmt, data[:272])
    return {
        "Position (X, Y, Z)": unpacked_data[15:18],  # Adaptez cet indice selon votre structure de données
    }

# Configuration du socket UDP
UDP_IP = "0.0.0.0"
UDP_PORT = 50000
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(0.1)

def update(frame):
    try:
        packet, addr = sock.recvfrom(1024)
        decoded_packet = decode_outsim_packet(packet)
        if decoded_packet:
            pos_x, pos_y, _ = decoded_packet['Position (X, Y, Z)']
            x_positions.append(pos_x)
            y_positions.append(pos_y)

            # Mise à jour des données du graphique
            line.set_data(x_positions, y_positions)

            # Ajustement dynamique des limites des axes pour inclure toutes les données
            ax.set_xlim(min(x_positions) - 10, max(x_positions) + 10)
            ax.set_ylim(min(y_positions) - 10, max(y_positions) + 10)

    except socket.timeout:
        print("Timeout - No packet received.")
    return line,

ani = animation.FuncAnimation(fig, update, init_func=init, frames=10, interval=100, blit=True)
plt.show()
